---
globs: *.py
---

# Python Development Standards

## Environment Management
- **ALWAYS use UV** for package management
- **Ensure .venv is activated** before running any Python commands
- Use `uv add` for adding dependencies
- Use `uv run` for executing Python scripts

## Code Structure
- Define **MAJOR VARIABLES in ALL CAPS** at the top of scripts
- Avoid embedding user input in variable definitions
- Use descriptive variable names and function names
- Follow PEP 8 style guidelines

## File Operations
- **Always include `encoding="utf-8"`** when using `with open()`
- Example:
```python
with open("file.txt", "r", encoding="utf-8") as f:
    content = f.read()
```

## Error Handling
- Use comprehensive `try-except` blocks
- Include descriptive error messages with exception details
- Use proper logging instead of print statements in production
- Example:
```python
try:
    result = risky_operation()
except SpecificException as e:
    logger.error(f"Operation failed: {e}")
    raise
```

## User Feedback
- Use `termcolor` for printing colored messages
- Provide feedback at every step
- Example:
```python
from termcolor import colored
print(colored("✓ Operation completed successfully", "green"))
print(colored("⚠ Warning: Check configuration", "yellow"))
print(colored("✗ Error occurred", "red"))
```

## Design Principles
- Implement **Separation of Concerns**
- Create modular, reusable functions
- Use type hints for better code documentation
- Follow single responsibility principle

## Third-Party Integrations
- **Use Composio** for third-party integrations when available
- Implement proper API error handling
- Use environment variables for configuration
- Follow OAuth 2.0 patterns for authentication
